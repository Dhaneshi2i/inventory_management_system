"""
Admin configuration for report models.
"""
from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.db.models import Sum, Count, Q
from django import forms
from .models import Report, DashboardWidget


@admin.register(Report)
class ReportAdmin(admin.ModelAdmin):
    """Admin for Report model."""
    list_display = ('name', 'report_type', 'format', 'generated_by', 'is_scheduled', 'created_at')
    list_filter = ('report_type', 'format', 'is_scheduled', 'created_at')
    search_fields = ('name', 'description', 'generated_by__username')
    readonly_fields = ('id', 'created_at', 'updated_at', 'data', 'file_path')
    ordering = ('-created_at',)
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'report_type', 'description')
        }),
        ('Configuration', {
            'fields': ('format', 'parameters')
        }),
        ('Scheduling', {
            'fields': ('is_scheduled', 'schedule_frequency'),
            'classes': ('collapse',)
        }),
        ('Generated Data', {
            'fields': ('data', 'file_path'),
            'classes': ('collapse',)
        }),
        ('User', {
            'fields': ('generated_by',),
            'classes': ('collapse',)
        }),
        ('Metadata', {
            'fields': ('id', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def get_queryset(self, request):
        """Optimize queryset with related data."""
        return super().get_queryset(request).select_related('generated_by')

    actions = ['generate_reports', 'export_reports', 'schedule_reports']

    def generate_reports(self, request, queryset):
        """Generate reports for selected items."""
        count = 0
        for report in queryset:
            try:
                report.data = report.generate_data()
                report.generated_by = request.user
                report.save(update_fields=['data', 'generated_by'])
                count += 1
            except Exception as e:
                self.message_user(request, f'Error generating report {report.name}: {str(e)}', level='ERROR')
        
        self.message_user(request, f'{count} reports were generated successfully.')
    generate_reports.short_description = "Generate selected reports"

    def export_reports(self, request, queryset):
        """Export reports data."""
        import csv
        from django.http import HttpResponse
        
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="reports.csv"'
        
        writer = csv.writer(response)
        writer.writerow(['Name', 'Type', 'Format', 'Generated By', 'Scheduled', 'Created'])
        
        for report in queryset:
            writer.writerow([
                report.name,
                report.get_report_type_display(),
                report.get_format_display(),
                report.generated_by.username if report.generated_by else '',
                'Yes' if report.is_scheduled else 'No',
                report.created_at.strftime('%Y-%m-%d %H:%M')
            ])
        
        return response
    export_reports.short_description = "Export reports to CSV"

    def schedule_reports(self, request, queryset):
        """Schedule selected reports."""
        count = queryset.update(is_scheduled=True)
        self.message_user(request, f'{count} reports were scheduled.')
    schedule_reports.short_description = "Schedule selected reports"


@admin.register(DashboardWidget)
class DashboardWidgetAdmin(admin.ModelAdmin):
    """Admin for DashboardWidget model."""
    list_display = ('name', 'widget_type', 'title', 'position', 'is_active', 'refresh_interval', 'created_at')
    list_filter = ('widget_type', 'is_active', 'created_at')
    search_fields = ('name', 'title', 'description')
    readonly_fields = ('id', 'created_at', 'updated_at')
    ordering = ('position', 'name')
    
    fieldsets = (
        ('Basic Information', {
            'fields': ('name', 'widget_type', 'title', 'description')
        }),
        ('Configuration', {
            'fields': ('configuration', 'position', 'refresh_interval')
        }),
        ('Status', {
            'fields': ('is_active',)
        }),
        ('Metadata', {
            'fields': ('id', 'created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def get_queryset(self, request):
        """Optimize queryset."""
        return super().get_queryset(request)

    actions = ['activate_widgets', 'deactivate_widgets', 'test_widgets']

    def activate_widgets(self, request, queryset):
        """Activate selected widgets."""
        count = queryset.update(is_active=True)
        self.message_user(request, f'{count} widgets were activated.')
    activate_widgets.short_description = "Activate selected widgets"

    def deactivate_widgets(self, request, queryset):
        """Deactivate selected widgets."""
        count = queryset.update(is_active=False)
        self.message_user(request, f'{count} widgets were deactivated.')
    deactivate_widgets.short_description = "Deactivate selected widgets"

    def test_widgets(self, request, queryset):
        """Test selected widgets."""
        count = 0
        for widget in queryset:
            try:
                data = widget.get_data()
                if data:
                    count += 1
            except Exception as e:
                self.message_user(request, f'Error testing widget {widget.name}: {str(e)}', level='ERROR')
        
        self.message_user(request, f'{count} widgets were tested successfully.')
    test_widgets.short_description = "Test selected widgets"
