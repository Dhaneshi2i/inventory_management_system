# Generated by Django 4.2.7 on 2025-08-01 18:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Warehouse name', max_length=100)),
                ('address', models.TextField(help_text='Warehouse address')),
                ('capacity', models.PositiveIntegerField(help_text='Warehouse capacity in units')),
                ('manager', models.CharField(help_text='Warehouse manager name', max_length=100)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email', max_length=254)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether warehouse is active')),
            ],
            options={
                'verbose_name': 'Warehouse',
                'verbose_name_plural': 'Warehouses',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='inventory_w_name_703b74_idx'), models.Index(fields=['is_active'], name='inventory_w_is_acti_3ddeac_idx')],
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('movement_type', models.CharField(choices=[('in', 'Stock In'), ('out', 'Stock Out'), ('transfer', 'Transfer'), ('adjustment', 'Adjustment')], help_text='Type of movement', max_length=20)),
                ('quantity', models.PositiveIntegerField(help_text='Quantity moved')),
                ('reference_type', models.CharField(blank=True, help_text='Reference type (e.g., purchase_order, sale, adjustment)', max_length=50, null=True)),
                ('reference_id', models.PositiveIntegerField(blank=True, help_text='Reference ID', null=True)),
                ('notes', models.TextField(blank=True, help_text='Movement notes')),
                ('product', models.ForeignKey(help_text='Product', on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='products.product')),
                ('warehouse', models.ForeignKey(help_text='Warehouse', on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='inventory.warehouse')),
            ],
            options={
                'verbose_name': 'Stock Movement',
                'verbose_name_plural': 'Stock Movements',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['product', 'warehouse'], name='inventory_s_product_5d230d_idx'), models.Index(fields=['movement_type'], name='inventory_s_movemen_018f99_idx'), models.Index(fields=['created_at'], name='inventory_s_created_05ebf5_idx'), models.Index(fields=['reference_type', 'reference_id'], name='inventory_s_referen_5aaa1a_idx')],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Current stock quantity', validators=[django.core.validators.MinValueValidator(0)])),
                ('reserved_quantity', models.PositiveIntegerField(default=0, help_text='Reserved quantity for pending orders', validators=[django.core.validators.MinValueValidator(0)])),
                ('reorder_point', models.PositiveIntegerField(default=0, help_text='Reorder point threshold')),
                ('max_stock_level', models.PositiveIntegerField(default=0, help_text='Maximum stock level')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('product', models.ForeignKey(help_text='Product', on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='products.product')),
                ('warehouse', models.ForeignKey(help_text='Warehouse', on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='inventory.warehouse')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventory',
                'ordering': ['product__name', 'warehouse__name'],
                'indexes': [models.Index(fields=['product', 'warehouse'], name='inventory_i_product_f6b65e_idx'), models.Index(fields=['quantity'], name='inventory_i_quantit_ef61d1_idx'), models.Index(fields=['reorder_point'], name='inventory_i_reorder_533070_idx')],
                'unique_together': {('product', 'warehouse')},
            },
        ),
    ]
